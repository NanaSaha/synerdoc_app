/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { PUBLIC_KEY_TOKEN } from './paystack-token';
import * as i0 from "@angular/core";
import * as i1 from "./paystack-token";
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
var Angular4PaystackService = /** @class */ (function () {
    function Angular4PaystackService(token) {
        this.token = token;
    }
    /**
     * @return {?}
     */
    Angular4PaystackService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {
                resolve();
                return;
            }
            /** @type {?} */
            var script = window.document.createElement('script');
            window.document.head.appendChild(script);
            /** @type {?} */
            var onLoadFunc = (/**
             * @return {?}
             */
            function () {
                script.removeEventListener('load', onLoadFunc);
                resolve();
            });
            script.addEventListener('load', onLoadFunc);
            script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');
        }));
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Angular4PaystackService.prototype.checkInput = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (!obj.key && !this.token) {
            return 'ANGULAR-PAYSTACK: Please insert a your public key';
        }
        if (!obj.email) {
            return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';
        }
        if (!obj.amount) {
            return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';
        }
        if (!obj.ref) {
            return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';
        }
        return '';
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Angular4PaystackService.prototype.getPaystackOptions = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var paystackOptions = {
            key: obj.key || this.token,
            email: obj.email,
            amount: obj.amount,
            ref: obj.ref,
            metadata: obj.metadata || {},
            currency: obj.currency || 'NGN',
            plan: obj.plan || '',
            channels: obj.channels,
            quantity: obj.quantity || '',
            subaccount: obj.subaccount || '',
            transaction_charge: obj.transaction_charge || 0,
            // tslint:disable-line
            bearer: obj.bearer || '',
        };
        return paystackOptions;
    };
    Angular4PaystackService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    Angular4PaystackService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [PUBLIC_KEY_TOKEN,] }] }
    ]; };
    /** @nocollapse */ Angular4PaystackService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Angular4PaystackService_Factory() { return new Angular4PaystackService(i0.ɵɵinject(i1.PUBLIC_KEY_TOKEN)); }, token: Angular4PaystackService, providedIn: "root" });
    return Angular4PaystackService;
}());
export { Angular4PaystackService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackService.prototype.token;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXI0LXBheXN0YWNrLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXI0LXBheXN0YWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7QUFHcEQsdUJBSUM7OztJQUhDLCtCQUVFOztBQUlKO0lBSUUsaUNBQThDLEtBQWE7UUFBYixVQUFLLEdBQUwsS0FBSyxDQUFRO0lBQUcsQ0FBQzs7OztJQUUvRCw0Q0FBVTs7O0lBQVY7UUFDRSxPQUFPLElBQUksT0FBTzs7OztRQUFDLFVBQUEsT0FBTztZQUN4QixJQUFJLE1BQU0sQ0FBQyxXQUFXLElBQUksT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUU7Z0JBQ3hFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE9BQU87YUFDUjs7Z0JBQ0ssTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUN0RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7O2dCQUNuQyxVQUFVOzs7WUFBRztnQkFDakIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDL0MsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUE7WUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7UUFDcEUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELDRDQUFVOzs7O0lBQVYsVUFBVyxHQUE2QjtRQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsT0FBTyxtREFBbUQsQ0FBQztTQUM1RDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQ2QsT0FBTyxrREFBa0QsQ0FBQztTQUMzRDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2YsT0FBTyxtREFBbUQsQ0FBQztTQUM1RDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1osT0FBTyxnREFBZ0QsQ0FBQztTQUN6RDtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7SUFFRCxvREFBa0I7Ozs7SUFBbEIsVUFBbUIsR0FBb0I7O1lBQy9CLGVBQWUsR0FBb0I7WUFDdkMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDMUIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTtZQUNsQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7WUFDWixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsSUFBSSxFQUFFO1lBQzVCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxJQUFJLEtBQUs7WUFDL0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRTtZQUNwQixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7WUFDdEIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRTtZQUM1QixVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFO1lBQ2hDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDOztZQUMvQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sSUFBSSxFQUFFO1NBQ3pCO1FBQ0QsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQzs7Z0JBdkRGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7NkNBRWMsTUFBTSxTQUFDLGdCQUFnQjs7O2tDQWZ0QztDQW9FQyxBQXpERCxJQXlEQztTQXREWSx1QkFBdUI7Ozs7OztJQUN0Qix3Q0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUFVCTElDX0tFWV9UT0tFTiB9IGZyb20gJy4vcGF5c3RhY2stdG9rZW4nO1xyXG5pbXBvcnQgeyBQYXlzdGFja09wdGlvbnMgfSBmcm9tICcuL3BheXN0YWNrLW9wdGlvbnMnO1xyXG5cclxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcclxuICBQYXlzdGFja1BvcDoge1xyXG4gICAgc2V0dXAob3B0aW9uczogUGFydGlhbDxQYXlzdGFja09wdGlvbnM+KTogeyBvcGVuSWZyYW1lKCk6IGFueSB9XHJcbiAgfTtcclxufVxyXG5kZWNsYXJlIHZhciB3aW5kb3c6IE15V2luZG93O1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBVQkxJQ19LRVlfVE9LRU4pIHByaXZhdGUgdG9rZW46IHN0cmluZykge31cclxuXHJcbiAgbG9hZFNjcmlwdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgaWYgKHdpbmRvdy5QYXlzdGFja1BvcCAmJiB0eXBlb2Ygd2luZG93LlBheXN0YWNrUG9wLnNldHVwID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBzY3JpcHQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIHdpbmRvdy5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgIGNvbnN0IG9uTG9hZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgc2NyaXB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWRGdW5jKTtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25Mb2FkRnVuYyk7XHJcbiAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2pzLnBheXN0YWNrLmNvL3YxL2lubGluZS5qcycpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjaGVja0lucHV0KG9iajogUGFydGlhbDxQYXlzdGFja09wdGlvbnM+KTogc3RyaW5nIHtcclxuICAgIGlmICghb2JqLmtleSAmJiAhdGhpcy50b2tlbikge1xyXG4gICAgICByZXR1cm4gJ0FOR1VMQVItUEFZU1RBQ0s6IFBsZWFzZSBpbnNlcnQgYSB5b3VyIHB1YmxpYyBrZXknO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvYmouZW1haWwpIHtcclxuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBQYXlzdGFjayBlbWFpbCBjYW5ub3QgYmUgZW1wdHknO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvYmouYW1vdW50KSB7XHJcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogUGF5c3RhY2sgYW1vdW50IGNhbm5vdCBiZSBlbXB0eSc7XHJcbiAgICB9XHJcbiAgICBpZiAoIW9iai5yZWYpIHtcclxuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBQYXlzdGFjayByZWYgY2Fubm90IGJlIGVtcHR5JztcclxuICAgIH1cclxuICAgIHJldHVybiAnJztcclxuICB9XHJcblxyXG4gIGdldFBheXN0YWNrT3B0aW9ucyhvYmo6IFBheXN0YWNrT3B0aW9ucyk6IFBheXN0YWNrT3B0aW9ucyB7XHJcbiAgICBjb25zdCBwYXlzdGFja09wdGlvbnM6IFBheXN0YWNrT3B0aW9ucyA9IHtcclxuICAgICAga2V5OiBvYmoua2V5IHx8IHRoaXMudG9rZW4sXHJcbiAgICAgIGVtYWlsOiBvYmouZW1haWwsXHJcbiAgICAgIGFtb3VudDogb2JqLmFtb3VudCxcclxuICAgICAgcmVmOiBvYmoucmVmLFxyXG4gICAgICBtZXRhZGF0YTogb2JqLm1ldGFkYXRhIHx8IHt9LFxyXG4gICAgICBjdXJyZW5jeTogb2JqLmN1cnJlbmN5IHx8ICdOR04nLFxyXG4gICAgICBwbGFuOiBvYmoucGxhbiB8fCAnJyxcclxuICAgICAgY2hhbm5lbHM6IG9iai5jaGFubmVscyxcclxuICAgICAgcXVhbnRpdHk6IG9iai5xdWFudGl0eSB8fCAnJyxcclxuICAgICAgc3ViYWNjb3VudDogb2JqLnN1YmFjY291bnQgfHwgJycsXHJcbiAgICAgIHRyYW5zYWN0aW9uX2NoYXJnZTogb2JqLnRyYW5zYWN0aW9uX2NoYXJnZSB8fCAwLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXHJcbiAgICAgIGJlYXJlcjogb2JqLmJlYXJlciB8fCAnJyxcclxuICAgIH07XHJcbiAgICByZXR1cm4gcGF5c3RhY2tPcHRpb25zO1xyXG4gIH1cclxuXHJcbn1cclxuIl19