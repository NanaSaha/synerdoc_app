/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { Angular4PaystackService } from './angular4-paystack.service';
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackEmbedComponent {
    // tslint:disable-line
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');
            this.pay();
        });
    }
}
Angular4PaystackEmbedComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular4-paystack-embed',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `<div id="paystackEmbedContainer"></div>`
            }] }
];
/** @nocollapse */
Angular4PaystackEmbedComponent.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackEmbedComponent.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    channels: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.key;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.email;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.amount;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.metadata;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.channels;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.ref;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.currency;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.plan;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.quantity;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.bearer;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.onClose;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.callback;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackEmbedComponent.prototype.paystackService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2stZW1iZWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjQtcGF5c3RhY2svIiwic291cmNlcyI6WyJsaWIvYW5ndWxhcjQtcGF5c3RhY2stZW1iZWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7OztBQUV0RSx1QkFFQzs7O0lBREMsK0JBQWlCOztBQVVuQixNQUFNLE9BQU8sOEJBQThCOzs7OztJQW1CekMsWUFBb0IsZUFBd0M7UUFBeEMsb0JBQWUsR0FBZixlQUFlLENBQXlCO1FBTGxELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFDekQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCOztRQUM1RSxhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFHRCxDQUFDOzs7O0lBRTFELEdBQUc7OztnQkFDSCxTQUFTLEdBQUcsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDekUsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtZQUNELElBQUksU0FBUyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3pCOztrQkFDSyxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1lBQy9ELE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN2QixDQUFDO0tBQUE7Ozs7O0lBRUQsWUFBWSxDQUFDLEdBQW9CO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDbkMsT0FBTyxtSEFBbUgsQ0FBQztTQUM1SDtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsR0FBb0I7UUFDbEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87OztRQUFHLEdBQUcsRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQSxDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7Ozs7SUFFSyxRQUFROztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQ1gsMkdBQTJHLENBQzVHLENBQUM7WUFDRixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDYixDQUFDO0tBQUE7OztZQXhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRSx5Q0FBeUM7YUFDcEQ7Ozs7WUFYUSx1QkFBdUI7OztrQkFjN0IsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO2tCQUNMLEtBQUs7dUJBQ0wsS0FBSzttQkFDTCxLQUFLO3VCQUNMLEtBQUs7eUJBQ0wsS0FBSztpQ0FDTCxLQUFLO3FCQUNMLEtBQUs7OEJBQ0wsS0FBSzswQkFDTCxNQUFNO3NCQUNOLE1BQU07dUJBQ04sTUFBTTs7OztJQWZQLDZDQUFxQjs7SUFDckIsK0NBQXVCOztJQUN2QixnREFBd0I7O0lBQ3hCLGtEQUFzQjs7SUFDdEIsa0RBQTRCOztJQUM1Qiw2Q0FBcUI7O0lBQ3JCLGtEQUEwQjs7SUFDMUIsOENBQXNCOztJQUN0QixrREFBMEI7O0lBQzFCLG9EQUE0Qjs7SUFDNUIsNERBQW9DOztJQUNwQyxnREFBd0I7O0lBQ3hCLHlEQUEwQzs7SUFDMUMscURBQW1FOztJQUNuRSxpREFBK0Q7O0lBQy9ELGtEQUFnRTs7SUFDaEUsMERBQXlEOzs7OztJQUU3Qyx5REFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYXlzdGFja09wdGlvbnMsIFByaXZhdGVQYXlzdGFja09wdGlvbnMgfSBmcm9tICcuL3BheXN0YWNrLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBBbmd1bGFyNFBheXN0YWNrU2VydmljZSB9IGZyb20gJy4vYW5ndWxhcjQtcGF5c3RhY2suc2VydmljZSc7XHJcblxyXG5pbnRlcmZhY2UgTXlXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xyXG4gIFBheXN0YWNrUG9wOiBhbnk7XHJcbn1cclxuZGVjbGFyZSB2YXIgd2luZG93OiBQYXJ0aWFsPE15V2luZG93PjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYW5ndWxhcjQtcGF5c3RhY2stZW1iZWQnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgPGRpdiBpZD1cInBheXN0YWNrRW1iZWRDb250YWluZXJcIj48L2Rpdj5gXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja0VtYmVkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKSBrZXk6IHN0cmluZztcclxuICBASW5wdXQoKSBlbWFpbDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGFtb3VudDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIG1ldGFkYXRhOiB7fTtcclxuICBASW5wdXQoKSBjaGFubmVsczogc3RyaW5nW107XHJcbiAgQElucHV0KCkgcmVmOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgY3VycmVuY3k6IHN0cmluZztcclxuICBASW5wdXQoKSBwbGFuOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcXVhbnRpdHk6IHN0cmluZztcclxuICBASW5wdXQoKSBzdWJhY2NvdW50OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdHJhbnNhY3Rpb25fY2hhcmdlOiBudW1iZXI7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBASW5wdXQoKSBiZWFyZXI6IHN0cmluZztcclxuICBASW5wdXQoKSBwYXlzdGFja09wdGlvbnM6IFBheXN0YWNrT3B0aW9ucztcclxuICBAT3V0cHV0KCkgcGF5bWVudEluaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBAT3V0cHV0KCkgY2FsbGJhY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgcHVibGljIF9wYXlzdGFja09wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVBheXN0YWNrT3B0aW9ucz47IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXlzdGFja1NlcnZpY2U6IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlKSB7fVxyXG5cclxuICBhc3luYyBwYXkoKSB7XHJcbiAgICBsZXQgZXJyb3JUZXh0ID0gJyc7XHJcbiAgICBpZiAodGhpcy5wYXlzdGFja09wdGlvbnMgJiYgT2JqZWN0LmtleXModGhpcy5wYXlzdGFja09wdGlvbnMpLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMucGF5c3RhY2tPcHRpb25zKTtcclxuICAgICAgdGhpcy5nZW5lcmF0ZU9wdGlvbnModGhpcy5wYXlzdGFja09wdGlvbnMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcyk7XHJcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yVGV4dCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yVGV4dCk7XHJcbiAgICAgIHJldHVybiBlcnJvclRleHQ7XHJcbiAgICB9XHJcbiAgICBhd2FpdCB0aGlzLnBheXN0YWNrU2VydmljZS5sb2FkU2NyaXB0KCk7XHJcbiAgICBpZiAodGhpcy5wYXltZW50SW5pdC5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMucGF5bWVudEluaXQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF5bWVudCA9IHdpbmRvdy5QYXlzdGFja1BvcC5zZXR1cCh0aGlzLl9wYXlzdGFja09wdGlvbnMpO1xyXG4gICAgcGF5bWVudC5vcGVuSWZyYW1lKCk7XHJcbiAgfVxyXG5cclxuICB2YWxkYXRlSW5wdXQob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcclxuICAgIGlmICghdGhpcy5jYWxsYmFjay5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogSW5zZXJ0IGEgY2FsbGJhY2sgb3V0cHV0IGxpa2Ugc28gKGNhbGxiYWNrKT1cXCdQYXltZW50Q29tcGxldGUoJGV2ZW50KVxcJyB0byBjaGVjayBwYXltZW50IHN0YXR1cyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5wYXlzdGFja1NlcnZpY2UuY2hlY2tJbnB1dChvYmopO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVPcHRpb25zKG9iajogUGF5c3RhY2tPcHRpb25zKSB7XHJcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMgPSB0aGlzLnBheXN0YWNrU2VydmljZS5nZXRQYXlzdGFja09wdGlvbnMob2JqKTtcclxuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucy5vbkNsb3NlID0gKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vbkNsb3NlLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zLmNhbGxiYWNrID0gKC4uLnJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIHRoaXMuY2FsbGJhY2suZW1pdCguLi5yZXNwb25zZSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbmdPbkluaXQoKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAnQU5HVUxBUi1QQVlTVEFDSzogVGhlIHBheXN0YWNrIGVtYmVkIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRoZSBwYXlzdGFjayBjb21wb25lbnQgb3IgZGlyZWN0aXZlJ1xyXG4gICAgKTtcclxuICAgIHRoaXMucGF5KCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=