/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { Angular4PaystackService } from './angular4-paystack.service';
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackDirective {
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
        // tslint:disable-line
        this.isPaying = false;
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.isPaying) {
                return;
            }
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
            this.isPaying = true;
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    buttonClick() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.pay();
        });
    }
}
Angular4PaystackDirective.decorators = [
    { type: Directive, args: [{
                selector: '[angular4-paystack]',
            },] }
];
/** @nocollapse */
Angular4PaystackDirective.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackDirective.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    channels: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }],
    buttonClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    Angular4PaystackDirective.prototype.key;
    /** @type {?} */
    Angular4PaystackDirective.prototype.email;
    /** @type {?} */
    Angular4PaystackDirective.prototype.amount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.metadata;
    /** @type {?} */
    Angular4PaystackDirective.prototype.ref;
    /** @type {?} */
    Angular4PaystackDirective.prototype.currency;
    /** @type {?} */
    Angular4PaystackDirective.prototype.plan;
    /** @type {?} */
    Angular4PaystackDirective.prototype.quantity;
    /** @type {?} */
    Angular4PaystackDirective.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.channels;
    /** @type {?} */
    Angular4PaystackDirective.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackDirective.prototype.bearer;
    /** @type {?} */
    Angular4PaystackDirective.prototype.class;
    /** @type {?} */
    Angular4PaystackDirective.prototype.style;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackDirective.prototype.onClose;
    /** @type {?} */
    Angular4PaystackDirective.prototype.callback;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.isPaying;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.paystackService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjQtcGF5c3RhY2svIiwic291cmNlcyI6WyJsaWIvYW5ndWxhcjQtcGF5c3RhY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7Ozs7QUFFdEUsdUJBSUM7OztJQUhDLCtCQUVFOztBQU9KLE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUFzQnBDLFlBQW9CLGVBQXdDO1FBQXhDLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtRQU5sRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCOztRQUNoRixZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUMsQ0FBQyxzQkFBc0I7O1FBQzVFLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7UUFFeEQsYUFBUSxHQUFHLEtBQUssQ0FBQztJQUVzQyxDQUFDOzs7O0lBRTFELEdBQUc7OztnQkFDSCxTQUFTLEdBQUcsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDekUsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtZQUNELElBQUksU0FBUyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFBRSxPQUFPO2FBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDekI7O2tCQUNLLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDL0QsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLENBQUM7S0FBQTs7Ozs7SUFFRCxZQUFZLENBQUMsR0FBb0I7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNuQyxPQUFPLG1IQUFtSCxDQUFDO1NBQzVIO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxHQUFvQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTzs7O1FBQUcsR0FBRyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQSxDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUEsQ0FBQztJQUNKLENBQUM7Ozs7SUFHSyxXQUFXOztZQUNmLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNiLENBQUM7S0FBQTs7O1lBMUVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2FBQ2hDOzs7O1lBWFEsdUJBQXVCOzs7a0JBYTdCLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO3VCQUNMLEtBQUs7a0JBQ0wsS0FBSzt1QkFDTCxLQUFLO21CQUNMLEtBQUs7dUJBQ0wsS0FBSzt5QkFDTCxLQUFLO3VCQUNMLEtBQUs7aUNBQ0wsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSzs4QkFDTCxLQUFLOzBCQUNMLE1BQU07c0JBQ04sTUFBTTt1QkFDTixNQUFNOzBCQWtETixZQUFZLFNBQUMsT0FBTzs7OztJQW5FckIsd0NBQXFCOztJQUNyQiwwQ0FBdUI7O0lBQ3ZCLDJDQUF3Qjs7SUFDeEIsNkNBQXNCOztJQUN0Qix3Q0FBcUI7O0lBQ3JCLDZDQUEwQjs7SUFDMUIseUNBQXNCOztJQUN0Qiw2Q0FBMEI7O0lBQzFCLCtDQUE0Qjs7SUFDNUIsNkNBQTRCOztJQUM1Qix1REFBb0M7O0lBQ3BDLDJDQUF3Qjs7SUFDeEIsMENBQXVCOztJQUN2QiwwQ0FBdUI7O0lBQ3ZCLG9EQUEwQzs7SUFDMUMsZ0RBQW1FOztJQUNuRSw0Q0FBK0Q7O0lBQy9ELDZDQUFnRTs7Ozs7SUFDaEUscURBQTBEOzs7OztJQUMxRCw2Q0FBeUI7Ozs7O0lBRWIsb0RBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYXlzdGFja09wdGlvbnMsIFByaXZhdGVQYXlzdGFja09wdGlvbnMgfSBmcm9tICcuL3BheXN0YWNrLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBBbmd1bGFyNFBheXN0YWNrU2VydmljZSB9IGZyb20gJy4vYW5ndWxhcjQtcGF5c3RhY2suc2VydmljZSc7XHJcblxyXG5pbnRlcmZhY2UgTXlXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xyXG4gIFBheXN0YWNrUG9wOiB7XHJcbiAgICBzZXR1cChvcHRpb25zOiBQYXJ0aWFsPFBheXN0YWNrT3B0aW9ucz4pOiB7IG9wZW5JZnJhbWUoKTogYW55IH1cclxuICB9O1xyXG59XHJcbmRlY2xhcmUgdmFyIHdpbmRvdzogTXlXaW5kb3c7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thbmd1bGFyNC1wYXlzdGFja10nLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBbmd1bGFyNFBheXN0YWNrRGlyZWN0aXZlIHtcclxuICBASW5wdXQoKSBrZXk6IHN0cmluZztcclxuICBASW5wdXQoKSBlbWFpbDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGFtb3VudDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIG1ldGFkYXRhOiB7fTtcclxuICBASW5wdXQoKSByZWY6IHN0cmluZztcclxuICBASW5wdXQoKSBjdXJyZW5jeTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHBsYW46IHN0cmluZztcclxuICBASW5wdXQoKSBxdWFudGl0eTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHN1YmFjY291bnQ6IHN0cmluZztcclxuICBASW5wdXQoKSBjaGFubmVsczogc3RyaW5nW107XHJcbiAgQElucHV0KCkgdHJhbnNhY3Rpb25fY2hhcmdlOiBudW1iZXI7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBASW5wdXQoKSBiZWFyZXI6IHN0cmluZztcclxuICBASW5wdXQoKSBjbGFzczogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHN0eWxlOiBvYmplY3Q7XHJcbiAgQElucHV0KCkgcGF5c3RhY2tPcHRpb25zOiBQYXlzdGFja09wdGlvbnM7XHJcbiAgQE91dHB1dCgpIHBheW1lbnRJbml0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXHJcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBAT3V0cHV0KCkgY2FsbGJhY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgcHJpdmF0ZSBfcGF5c3RhY2tPcHRpb25zOiBQYXJ0aWFsPFByaXZhdGVQYXlzdGFja09wdGlvbnM+OyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXHJcbiAgcHJpdmF0ZSBpc1BheWluZyA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBheXN0YWNrU2VydmljZTogQW5ndWxhcjRQYXlzdGFja1NlcnZpY2UpIHt9XHJcblxyXG4gIGFzeW5jIHBheSgpIHtcclxuICAgIGxldCBlcnJvclRleHQgPSAnJztcclxuICAgIGlmICh0aGlzLnBheXN0YWNrT3B0aW9ucyAmJiBPYmplY3Qua2V5cyh0aGlzLnBheXN0YWNrT3B0aW9ucykubGVuZ3RoID49IDIpIHtcclxuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcy5wYXlzdGFja09wdGlvbnMpO1xyXG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzLnBheXN0YWNrT3B0aW9ucyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlcnJvclRleHQgPSB0aGlzLnZhbGRhdGVJbnB1dCh0aGlzKTtcclxuICAgICAgdGhpcy5nZW5lcmF0ZU9wdGlvbnModGhpcyk7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3JUZXh0KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUZXh0KTtcclxuICAgICAgcmV0dXJuIGVycm9yVGV4dDtcclxuICAgIH1cclxuICAgIGF3YWl0IHRoaXMucGF5c3RhY2tTZXJ2aWNlLmxvYWRTY3JpcHQoKTtcclxuICAgIGlmICh0aGlzLmlzUGF5aW5nKSB7IHJldHVybjsgfVxyXG4gICAgaWYgKHRoaXMucGF5bWVudEluaXQub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLnBheW1lbnRJbml0LmVtaXQoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBheW1lbnQgPSB3aW5kb3cuUGF5c3RhY2tQb3Auc2V0dXAodGhpcy5fcGF5c3RhY2tPcHRpb25zKTtcclxuICAgIHBheW1lbnQub3BlbklmcmFtZSgpO1xyXG4gICAgdGhpcy5pc1BheWluZyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICB2YWxkYXRlSW5wdXQob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcclxuICAgIGlmICghdGhpcy5jYWxsYmFjay5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogSW5zZXJ0IGEgY2FsbGJhY2sgb3V0cHV0IGxpa2Ugc28gKGNhbGxiYWNrKT1cXCdQYXltZW50Q29tcGxldGUoJGV2ZW50KVxcJyB0byBjaGVjayBwYXltZW50IHN0YXR1cyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5wYXlzdGFja1NlcnZpY2UuY2hlY2tJbnB1dChvYmopO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVPcHRpb25zKG9iajogUGF5c3RhY2tPcHRpb25zKSB7XHJcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMgPSB0aGlzLnBheXN0YWNrU2VydmljZS5nZXRQYXlzdGFja09wdGlvbnMob2JqKTtcclxuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucy5vbkNsb3NlID0gKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vbkNsb3NlLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgICB0aGlzLmlzUGF5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbkNsb3NlLmVtaXQoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucy5jYWxsYmFjayA9ICguLi5yZXNwb25zZSkgPT4ge1xyXG4gICAgICB0aGlzLmlzUGF5aW5nID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuY2FsbGJhY2suZW1pdCguLi5yZXNwb25zZSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gIGFzeW5jIGJ1dHRvbkNsaWNrKCkge1xyXG4gICAgdGhpcy5wYXkoKTtcclxuICB9XHJcbn1cclxuIl19