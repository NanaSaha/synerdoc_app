/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { PUBLIC_KEY_TOKEN } from './paystack-token';
import * as i0 from "@angular/core";
import * as i1 from "./paystack-token";
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackService {
    /**
     * @param {?} token
     */
    constructor(token) {
        this.token = token;
    }
    /**
     * @return {?}
     */
    loadScript() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {
                resolve();
                return;
            }
            /** @type {?} */
            const script = window.document.createElement('script');
            window.document.head.appendChild(script);
            /** @type {?} */
            const onLoadFunc = (/**
             * @return {?}
             */
            () => {
                script.removeEventListener('load', onLoadFunc);
                resolve();
            });
            script.addEventListener('load', onLoadFunc);
            script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');
        }));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    checkInput(obj) {
        if (!obj.key && !this.token) {
            return 'ANGULAR-PAYSTACK: Please insert a your public key';
        }
        if (!obj.email) {
            return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';
        }
        if (!obj.amount) {
            return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';
        }
        if (!obj.ref) {
            return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';
        }
        return '';
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    getPaystackOptions(obj) {
        /** @type {?} */
        const paystackOptions = {
            key: obj.key || this.token,
            email: obj.email,
            amount: obj.amount,
            ref: obj.ref,
            metadata: obj.metadata || {},
            currency: obj.currency || 'NGN',
            plan: obj.plan || '',
            channels: obj.channels,
            quantity: obj.quantity || '',
            subaccount: obj.subaccount || '',
            transaction_charge: obj.transaction_charge || 0,
            // tslint:disable-line
            bearer: obj.bearer || '',
        };
        return paystackOptions;
    }
}
Angular4PaystackService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
Angular4PaystackService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PUBLIC_KEY_TOKEN,] }] }
];
/** @nocollapse */ Angular4PaystackService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Angular4PaystackService_Factory() { return new Angular4PaystackService(i0.ɵɵinject(i1.PUBLIC_KEY_TOKEN)); }, token: Angular4PaystackService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackService.prototype.token;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXI0LXBheXN0YWNrLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXI0LXBheXN0YWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7QUFHcEQsdUJBSUM7OztJQUhDLCtCQUVFOztBQU9KLE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFDbEMsWUFBOEMsS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7SUFBRyxDQUFDOzs7O0lBRS9ELFVBQVU7UUFDUixPQUFPLElBQUksT0FBTzs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksTUFBTSxDQUFDLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLFVBQVUsRUFBRTtnQkFDeEUsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsT0FBTzthQUNSOztrQkFDSyxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7a0JBQ25DLFVBQVU7OztZQUFHLEdBQUcsRUFBRTtnQkFDdEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDL0MsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUE7WUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7UUFDcEUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxHQUE2QjtRQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsT0FBTyxtREFBbUQsQ0FBQztTQUM1RDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQ2QsT0FBTyxrREFBa0QsQ0FBQztTQUMzRDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2YsT0FBTyxtREFBbUQsQ0FBQztTQUM1RDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1osT0FBTyxnREFBZ0QsQ0FBQztTQUN6RDtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxHQUFvQjs7Y0FDL0IsZUFBZSxHQUFvQjtZQUN2QyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSztZQUMxQixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7WUFDaEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO1lBQ2xCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztZQUNaLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxJQUFJLEVBQUU7WUFDNUIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLElBQUksS0FBSztZQUMvQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3BCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtZQUN0QixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsSUFBSSxFQUFFO1lBQzVCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUU7WUFDaEMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixJQUFJLENBQUM7O1lBQy9DLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUU7U0FDekI7UUFDRCxPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDOzs7WUF2REYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O3lDQUVjLE1BQU0sU0FBQyxnQkFBZ0I7Ozs7Ozs7O0lBQXhCLHdDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQVUJMSUNfS0VZX1RPS0VOIH0gZnJvbSAnLi9wYXlzdGFjay10b2tlbic7XHJcbmltcG9ydCB7IFBheXN0YWNrT3B0aW9ucyB9IGZyb20gJy4vcGF5c3RhY2stb3B0aW9ucyc7XHJcblxyXG5pbnRlcmZhY2UgTXlXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xyXG4gIFBheXN0YWNrUG9wOiB7XHJcbiAgICBzZXR1cChvcHRpb25zOiBQYXJ0aWFsPFBheXN0YWNrT3B0aW9ucz4pOiB7IG9wZW5JZnJhbWUoKTogYW55IH1cclxuICB9O1xyXG59XHJcbmRlY2xhcmUgdmFyIHdpbmRvdzogTXlXaW5kb3c7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja1NlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUFVCTElDX0tFWV9UT0tFTikgcHJpdmF0ZSB0b2tlbjogc3RyaW5nKSB7fVxyXG5cclxuICBsb2FkU2NyaXB0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBpZiAod2luZG93LlBheXN0YWNrUG9wICYmIHR5cGVvZiB3aW5kb3cuUGF5c3RhY2tQb3Auc2V0dXAgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgd2luZG93LmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgY29uc3Qgb25Mb2FkRnVuYyA9ICgpID0+IHtcclxuICAgICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZEZ1bmMpO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfTtcclxuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWRGdW5jKTtcclxuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vanMucGF5c3RhY2suY28vdjEvaW5saW5lLmpzJyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoZWNrSW5wdXQob2JqOiBQYXJ0aWFsPFBheXN0YWNrT3B0aW9ucz4pOiBzdHJpbmcge1xyXG4gICAgaWYgKCFvYmoua2V5ICYmICF0aGlzLnRva2VuKSB7XHJcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogUGxlYXNlIGluc2VydCBhIHlvdXIgcHVibGljIGtleSc7XHJcbiAgICB9XHJcbiAgICBpZiAoIW9iai5lbWFpbCkge1xyXG4gICAgICByZXR1cm4gJ0FOR1VMQVItUEFZU1RBQ0s6IFBheXN0YWNrIGVtYWlsIGNhbm5vdCBiZSBlbXB0eSc7XHJcbiAgICB9XHJcbiAgICBpZiAoIW9iai5hbW91bnQpIHtcclxuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBQYXlzdGFjayBhbW91bnQgY2Fubm90IGJlIGVtcHR5JztcclxuICAgIH1cclxuICAgIGlmICghb2JqLnJlZikge1xyXG4gICAgICByZXR1cm4gJ0FOR1VMQVItUEFZU1RBQ0s6IFBheXN0YWNrIHJlZiBjYW5ub3QgYmUgZW1wdHknO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGF5c3RhY2tPcHRpb25zKG9iajogUGF5c3RhY2tPcHRpb25zKTogUGF5c3RhY2tPcHRpb25zIHtcclxuICAgIGNvbnN0IHBheXN0YWNrT3B0aW9uczogUGF5c3RhY2tPcHRpb25zID0ge1xyXG4gICAgICBrZXk6IG9iai5rZXkgfHwgdGhpcy50b2tlbixcclxuICAgICAgZW1haWw6IG9iai5lbWFpbCxcclxuICAgICAgYW1vdW50OiBvYmouYW1vdW50LFxyXG4gICAgICByZWY6IG9iai5yZWYsXHJcbiAgICAgIG1ldGFkYXRhOiBvYmoubWV0YWRhdGEgfHwge30sXHJcbiAgICAgIGN1cnJlbmN5OiBvYmouY3VycmVuY3kgfHwgJ05HTicsXHJcbiAgICAgIHBsYW46IG9iai5wbGFuIHx8ICcnLFxyXG4gICAgICBjaGFubmVsczogb2JqLmNoYW5uZWxzLFxyXG4gICAgICBxdWFudGl0eTogb2JqLnF1YW50aXR5IHx8ICcnLFxyXG4gICAgICBzdWJhY2NvdW50OiBvYmouc3ViYWNjb3VudCB8fCAnJyxcclxuICAgICAgdHJhbnNhY3Rpb25fY2hhcmdlOiBvYmoudHJhbnNhY3Rpb25fY2hhcmdlIHx8IDAsIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICAgICAgYmVhcmVyOiBvYmouYmVhcmVyIHx8ICcnLFxyXG4gICAgfTtcclxuICAgIHJldHVybiBwYXlzdGFja09wdGlvbnM7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=