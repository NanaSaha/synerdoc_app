/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function PaystackOptions() { }
if (false) {
    /**
     * Amount to withdraw (in kobo for NGN)
     * @type {?}
     */
    PaystackOptions.prototype.amount;
    /**
     * A flat fee to charge the subaccount for this transaction, in kobo.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.transaction_charge;
    /**
     * Your pubic Key from Paystack. Use test key for test mode and live key for live mode
     * @type {?|undefined}
     */
    PaystackOptions.prototype.key;
    /**
     * The customer's email address
     * @type {?}
     */
    PaystackOptions.prototype.email;
    /**
     * Unique case sensitive transaction reference. Only -,., = and alphanumeric characters allowed.
     * @type {?}
     */
    PaystackOptions.prototype.ref;
    /**
     * custom details
     * eg `{date: 12-05-2020}`
     * @type {?|undefined}
     */
    PaystackOptions.prototype.metadata;
    /**
     * Transaction currency
     * Default `NGN`
     * @type {?|undefined}
     */
    PaystackOptions.prototype.currency;
    /**
     * If transaction is to create a subscription to a predefined plan, provide plan code here.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.plan;
    /**
     * Used to apply a multiple to the amount returned by the plan code above.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.quantity;
    /**
     * The code for the subaccount that owns the payment.
     * @type {?|undefined}
     */
    PaystackOptions.prototype.subaccount;
    /**
     * Who bears Paystack charges? account or subaccount
     * @type {?|undefined}
     */
    PaystackOptions.prototype.bearer;
    /**
     * Send 'card' or 'bank' or 'card','bank' as an array to specify what options to show the user paying
     * @type {?|undefined}
     */
    PaystackOptions.prototype.channels;
}
/**
 * @record
 */
export function PrivatePaystackOptions() { }
if (false) {
    /**
     * A function to be called on successful card charge. User’s can always be redirected to a successful or
     * failed page supplied by the merchant here based on response
     * \@param response?: The server response
     * @type {?}
     */
    PrivatePaystackOptions.prototype.callback;
    /**
     * A function to be called when the pay modal is closed.
     * @type {?}
     */
    PrivatePaystackOptions.prototype.onClose;
    /**
     * A function to be called when payment is about to begin
     * @type {?}
     */
    PrivatePaystackOptions.prototype.init;
}
/**
 * @record
 */
export function PrivatePaystackOptionsWithEmitters() { }
if (false) {
    /**
     * A function to be called on successful card charge. User’s can always be redirected to a successful or
     * failed page supplied by the merchant here based on response
     * @type {?}
     */
    PrivatePaystackOptionsWithEmitters.prototype.callback;
    /**
     * A function to be called when the pay modal is closed.
     * @type {?}
     */
    PrivatePaystackOptionsWithEmitters.prototype.onClose;
    /**
     * A function to be called when payment is about to begin
     * @type {?}
     */
    PrivatePaystackOptionsWithEmitters.prototype.init;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5c3RhY2stb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXI0LXBheXN0YWNrLyIsInNvdXJjZXMiOlsibGliL3BheXN0YWNrLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLHFDQW1EQzs7Ozs7O0lBL0NDLGlDQUFlOzs7OztJQUlmLDZDQUE0Qjs7Ozs7SUFJNUIsOEJBQWE7Ozs7O0lBSWIsZ0NBQWM7Ozs7O0lBSWQsOEJBQVk7Ozs7OztJQUtaLG1DQUFjOzs7Ozs7SUFLZCxtQ0FBa0I7Ozs7O0lBSWxCLCtCQUFjOzs7OztJQUlkLG1DQUFrQjs7Ozs7SUFJbEIscUNBQW9COzs7OztJQUlwQixpQ0FBZ0I7Ozs7O0lBSWhCLG1DQUFvQjs7Ozs7QUFHdEIsNENBZUM7Ozs7Ozs7O0lBVEMsMENBQW1DOzs7OztJQUluQyx5Q0FBb0I7Ozs7O0lBSXBCLHNDQUFpQjs7Ozs7QUFHbkIsd0RBY0M7Ozs7Ozs7SUFUQyxzREFBNEI7Ozs7O0lBSTVCLHFEQUE0Qjs7Ozs7SUFJNUIsa0RBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBheXN0YWNrT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogQW1vdW50IHRvIHdpdGhkcmF3IChpbiBrb2JvIGZvciBOR04pXHJcbiAgICovXHJcbiAgYW1vdW50OiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogQSBmbGF0IGZlZSB0byBjaGFyZ2UgdGhlIHN1YmFjY291bnQgZm9yIHRoaXMgdHJhbnNhY3Rpb24sIGluIGtvYm8uXHJcbiAgICovXHJcbiAgdHJhbnNhY3Rpb25fY2hhcmdlPzogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFlvdXIgcHViaWMgS2V5IGZyb20gUGF5c3RhY2suIFVzZSB0ZXN0IGtleSBmb3IgdGVzdCBtb2RlIGFuZCBsaXZlIGtleSBmb3IgbGl2ZSBtb2RlXHJcbiAgICovXHJcbiAga2V5Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjdXN0b21lcidzIGVtYWlsIGFkZHJlc3NcclxuICAgKi9cclxuICBlbWFpbDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFVuaXF1ZSBjYXNlIHNlbnNpdGl2ZSB0cmFuc2FjdGlvbiByZWZlcmVuY2UuIE9ubHkgLSwuLCA9IGFuZCBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbGxvd2VkLlxyXG4gICAqL1xyXG4gIHJlZjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIGN1c3RvbSBkZXRhaWxzXHJcbiAgICogZWcgYHtkYXRlOiAxMi0wNS0yMDIwfWBcclxuICAgKi9cclxuICBtZXRhZGF0YT86IHt9O1xyXG4gIC8qKlxyXG4gICAqIFRyYW5zYWN0aW9uIGN1cnJlbmN5XHJcbiAgICogRGVmYXVsdCBgTkdOYFxyXG4gICAqL1xyXG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIElmIHRyYW5zYWN0aW9uIGlzIHRvIGNyZWF0ZSBhIHN1YnNjcmlwdGlvbiB0byBhIHByZWRlZmluZWQgcGxhbiwgcHJvdmlkZSBwbGFuIGNvZGUgaGVyZS5cclxuICAgKi9cclxuICBwbGFuPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gYXBwbHkgYSBtdWx0aXBsZSB0byB0aGUgYW1vdW50IHJldHVybmVkIGJ5IHRoZSBwbGFuIGNvZGUgYWJvdmUuXHJcbiAgICovXHJcbiAgcXVhbnRpdHk/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvZGUgZm9yIHRoZSBzdWJhY2NvdW50IHRoYXQgb3ducyB0aGUgcGF5bWVudC5cclxuICAgKi9cclxuICBzdWJhY2NvdW50Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFdobyBiZWFycyBQYXlzdGFjayBjaGFyZ2VzPyBhY2NvdW50IG9yIHN1YmFjY291bnRcclxuICAgKi9cclxuICBiZWFyZXI/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU2VuZCAnY2FyZCcgb3IgJ2JhbmsnIG9yICdjYXJkJywnYmFuaycgYXMgYW4gYXJyYXkgdG8gc3BlY2lmeSB3aGF0IG9wdGlvbnMgdG8gc2hvdyB0aGUgdXNlciBwYXlpbmdcclxuICAgKi9cclxuICBjaGFubmVscz86IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByaXZhdGVQYXlzdGFja09wdGlvbnMgZXh0ZW5kcyBQYXlzdGFja09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3NmdWwgY2FyZCBjaGFyZ2UuIFVzZXLigJlzIGNhbiBhbHdheXMgYmUgcmVkaXJlY3RlZCB0byBhIHN1Y2Nlc3NmdWwgb3JcclxuICAgKiBmYWlsZWQgcGFnZSBzdXBwbGllZCBieSB0aGUgbWVyY2hhbnQgaGVyZSBiYXNlZCBvbiByZXNwb25zZVxyXG4gICAqIEBwYXJhbSByZXNwb25zZT86IFRoZSBzZXJ2ZXIgcmVzcG9uc2VcclxuICAgKi9cclxuICBjYWxsYmFjazogKHJlc3BvbnNlPzogYW55KSA9PiB2b2lkO1xyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBheSBtb2RhbCBpcyBjbG9zZWQuXHJcbiAgICovXHJcbiAgb25DbG9zZTogKCkgPT4gdm9pZDtcclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHBheW1lbnQgaXMgYWJvdXQgdG8gYmVnaW5cclxuICAgKi9cclxuICBpbml0OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByaXZhdGVQYXlzdGFja09wdGlvbnNXaXRoRW1pdHRlcnMgZXh0ZW5kcyBQYXlzdGFja09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3NmdWwgY2FyZCBjaGFyZ2UuIFVzZXLigJlzIGNhbiBhbHdheXMgYmUgcmVkaXJlY3RlZCB0byBhIHN1Y2Nlc3NmdWwgb3JcclxuICAgKiBmYWlsZWQgcGFnZSBzdXBwbGllZCBieSB0aGUgbWVyY2hhbnQgaGVyZSBiYXNlZCBvbiByZXNwb25zZVxyXG4gICAqL1xyXG4gIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBwYXkgbW9kYWwgaXMgY2xvc2VkLlxyXG4gICAqL1xyXG4gIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAvKipcclxuICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHBheW1lbnQgaXMgYWJvdXQgdG8gYmVnaW5cclxuICAgKi9cclxuICBpbml0OiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbn1cclxuIl19