import { __awaiter } from 'tslib';
import { InjectionToken, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, Input, Output, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["*"];
const PUBLIC_KEY_TOKEN = new InjectionToken('paystack.publickey');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
class Angular4PaystackService {
    /**
     * @param {?} token
     */
    constructor(token) {
        this.token = token;
    }
    /**
     * @return {?}
     */
    loadScript() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {
                resolve();
                return;
            }
            /** @type {?} */
            const script = window.document.createElement('script');
            window.document.head.appendChild(script);
            /** @type {?} */
            const onLoadFunc = (/**
             * @return {?}
             */
            () => {
                script.removeEventListener('load', onLoadFunc);
                resolve();
            });
            script.addEventListener('load', onLoadFunc);
            script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');
        }));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    checkInput(obj) {
        if (!obj.key && !this.token) {
            return 'ANGULAR-PAYSTACK: Please insert a your public key';
        }
        if (!obj.email) {
            return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';
        }
        if (!obj.amount) {
            return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';
        }
        if (!obj.ref) {
            return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';
        }
        return '';
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    getPaystackOptions(obj) {
        /** @type {?} */
        const paystackOptions = {
            key: obj.key || this.token,
            email: obj.email,
            amount: obj.amount,
            ref: obj.ref,
            metadata: obj.metadata || {},
            currency: obj.currency || 'NGN',
            plan: obj.plan || '',
            channels: obj.channels,
            quantity: obj.quantity || '',
            subaccount: obj.subaccount || '',
            transaction_charge: obj.transaction_charge || 0,
            // tslint:disable-line
            bearer: obj.bearer || '',
        };
        return paystackOptions;
    }
}
Angular4PaystackService.ɵfac = function Angular4PaystackService_Factory(t) { return new (t || Angular4PaystackService)(ɵngcc0.ɵɵinject(PUBLIC_KEY_TOKEN)); };
Angular4PaystackService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Angular4PaystackService, factory: Angular4PaystackService.ɵfac, providedIn: 'root' });
/** @nocollapse */
Angular4PaystackService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PUBLIC_KEY_TOKEN,] }] }
];
/** @nocollapse */ Angular4PaystackService.ngInjectableDef = ɵɵdefineInjectable({ factory: function Angular4PaystackService_Factory() { return new Angular4PaystackService(ɵɵinject(PUBLIC_KEY_TOKEN)); }, token: Angular4PaystackService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular4PaystackService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [PUBLIC_KEY_TOKEN]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackService.prototype.token;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow$1() { }
if (false) {
    /** @type {?} */
    MyWindow$1.prototype.PaystackPop;
}
class Angular4PaystackComponent {
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
        // tslint:disable-line
        this.isPaying = false;
    }
    /**
     * @return {?}
     */
    pay() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.isPaying) {
                return;
            }
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
            this.isPaying = true;
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        });
    }
}
Angular4PaystackComponent.ɵfac = function Angular4PaystackComponent_Factory(t) { return new (t || Angular4PaystackComponent)(ɵngcc0.ɵɵdirectiveInject(Angular4PaystackService)); };
Angular4PaystackComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Angular4PaystackComponent, selectors: [["angular4-paystack"]], inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", channels: "channels", subaccount: "subaccount", transaction_charge: "transaction_charge", bearer: "bearer", class: "class", style: "style", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[3, "ngClass", "ngStyle", "click"]], template: function Angular4PaystackComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function Angular4PaystackComponent_Template_button_click_0_listener() { return ctx.pay(); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.class)("ngStyle", ctx.style);
    } }, dependencies: [ɵngcc1.NgClass, ɵngcc1.NgStyle], encapsulation: 2 });
/** @nocollapse */
Angular4PaystackComponent.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackComponent.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    channels: [{ type: Input }],
    subaccount: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular4PaystackComponent, [{
        type: Component,
        args: [{
                selector: 'angular4-paystack',
                template: `<button [ngClass]="class" [ngStyle]="style" (click)="pay()"><ng-content></ng-content></button>`
            }]
    }], function () { return [{ type: Angular4PaystackService }]; }, { paymentInit: [{
            type: Output
        }], onClose: [{
            type: Output
        }], callback: [{
            type: Output
        }], key: [{
            type: Input
        }], email: [{
            type: Input
        }], amount: [{
            type: Input
        }], metadata: [{
            type: Input
        }], ref: [{
            type: Input
        }], currency: [{
            type: Input
        }], plan: [{
            type: Input
        }], quantity: [{
            type: Input
        }], channels: [{
            type: Input
        }], subaccount: [{
            type: Input
        }], transaction_charge: [{
            type: Input
        }], bearer: [{
            type: Input
        }], class: [{
            type: Input
        }], style: [{
            type: Input
        }], paystackOptions: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    Angular4PaystackComponent.prototype.key;
    /** @type {?} */
    Angular4PaystackComponent.prototype.email;
    /** @type {?} */
    Angular4PaystackComponent.prototype.amount;
    /** @type {?} */
    Angular4PaystackComponent.prototype.metadata;
    /** @type {?} */
    Angular4PaystackComponent.prototype.ref;
    /** @type {?} */
    Angular4PaystackComponent.prototype.currency;
    /** @type {?} */
    Angular4PaystackComponent.prototype.plan;
    /** @type {?} */
    Angular4PaystackComponent.prototype.quantity;
    /** @type {?} */
    Angular4PaystackComponent.prototype.channels;
    /** @type {?} */
    Angular4PaystackComponent.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackComponent.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackComponent.prototype.bearer;
    /** @type {?} */
    Angular4PaystackComponent.prototype.class;
    /** @type {?} */
    Angular4PaystackComponent.prototype.style;
    /** @type {?} */
    Angular4PaystackComponent.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackComponent.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackComponent.prototype.onClose;
    /** @type {?} */
    Angular4PaystackComponent.prototype.callback;
    /** @type {?} */
    Angular4PaystackComponent.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackComponent.prototype.isPaying;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackComponent.prototype.paystackService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow$2() { }
if (false) {
    /** @type {?} */
    MyWindow$2.prototype.PaystackPop;
}
class Angular4PaystackDirective {
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
        // tslint:disable-line
        this.isPaying = false;
    }
    /**
     * @return {?}
     */
    pay() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.isPaying) {
                return;
            }
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
            this.isPaying = true;
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    buttonClick() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pay();
        });
    }
}
Angular4PaystackDirective.ɵfac = function Angular4PaystackDirective_Factory(t) { return new (t || Angular4PaystackDirective)(ɵngcc0.ɵɵdirectiveInject(Angular4PaystackService)); };
Angular4PaystackDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: Angular4PaystackDirective, selectors: [["", "angular4-paystack", ""]], hostBindings: function Angular4PaystackDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function Angular4PaystackDirective_click_HostBindingHandler() { return ctx.buttonClick(); });
    } }, inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", subaccount: "subaccount", channels: "channels", transaction_charge: "transaction_charge", bearer: "bearer", class: "class", style: "style", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" } });
/** @nocollapse */
Angular4PaystackDirective.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackDirective.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    channels: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }],
    buttonClick: [{ type: HostListener, args: ['click',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular4PaystackDirective, [{
        type: Directive,
        args: [{
                selector: '[angular4-paystack]'
            }]
    }], function () { return [{ type: Angular4PaystackService }]; }, { paymentInit: [{
            type: Output
        }], onClose: [{
            type: Output
        }], callback: [{
            type: Output
        }], 
    /**
     * @return {?}
     */
    buttonClick: [{
            type: HostListener,
            args: ['click']
        }], key: [{
            type: Input
        }], email: [{
            type: Input
        }], amount: [{
            type: Input
        }], metadata: [{
            type: Input
        }], ref: [{
            type: Input
        }], currency: [{
            type: Input
        }], plan: [{
            type: Input
        }], quantity: [{
            type: Input
        }], subaccount: [{
            type: Input
        }], channels: [{
            type: Input
        }], transaction_charge: [{
            type: Input
        }], bearer: [{
            type: Input
        }], class: [{
            type: Input
        }], style: [{
            type: Input
        }], paystackOptions: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    Angular4PaystackDirective.prototype.key;
    /** @type {?} */
    Angular4PaystackDirective.prototype.email;
    /** @type {?} */
    Angular4PaystackDirective.prototype.amount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.metadata;
    /** @type {?} */
    Angular4PaystackDirective.prototype.ref;
    /** @type {?} */
    Angular4PaystackDirective.prototype.currency;
    /** @type {?} */
    Angular4PaystackDirective.prototype.plan;
    /** @type {?} */
    Angular4PaystackDirective.prototype.quantity;
    /** @type {?} */
    Angular4PaystackDirective.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.channels;
    /** @type {?} */
    Angular4PaystackDirective.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackDirective.prototype.bearer;
    /** @type {?} */
    Angular4PaystackDirective.prototype.class;
    /** @type {?} */
    Angular4PaystackDirective.prototype.style;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackDirective.prototype.onClose;
    /** @type {?} */
    Angular4PaystackDirective.prototype.callback;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.isPaying;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.paystackService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MyWindow$3() { }
if (false) {
    /** @type {?} */
    MyWindow$3.prototype.PaystackPop;
}
class Angular4PaystackEmbedComponent {
    // tslint:disable-line
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
    }
    /**
     * @return {?}
     */
    pay() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');
            this.pay();
        });
    }
}
Angular4PaystackEmbedComponent.ɵfac = function Angular4PaystackEmbedComponent_Factory(t) { return new (t || Angular4PaystackEmbedComponent)(ɵngcc0.ɵɵdirectiveInject(Angular4PaystackService)); };
Angular4PaystackEmbedComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Angular4PaystackEmbedComponent, selectors: [["angular4-paystack-embed"]], inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", channels: "channels", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", subaccount: "subaccount", transaction_charge: "transaction_charge", bearer: "bearer", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" }, decls: 1, vars: 0, consts: [["id", "paystackEmbedContainer"]], template: function Angular4PaystackEmbedComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } }, encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
Angular4PaystackEmbedComponent.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackEmbedComponent.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    channels: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular4PaystackEmbedComponent, [{
        type: Component,
        args: [{
                selector: 'angular4-paystack-embed',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `<div id="paystackEmbedContainer"></div>`
            }]
    }], function () { return [{ type: Angular4PaystackService }]; }, { paymentInit: [{
            type: Output
        }], onClose: [{
            type: Output
        }], callback: [{
            type: Output
        }], key: [{
            type: Input
        }], email: [{
            type: Input
        }], amount: [{
            type: Input
        }], metadata: [{
            type: Input
        }], channels: [{
            type: Input
        }], ref: [{
            type: Input
        }], currency: [{
            type: Input
        }], plan: [{
            type: Input
        }], quantity: [{
            type: Input
        }], subaccount: [{
            type: Input
        }], transaction_charge: [{
            type: Input
        }], bearer: [{
            type: Input
        }], paystackOptions: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.key;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.email;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.amount;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.metadata;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.channels;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.ref;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.currency;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.plan;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.quantity;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.bearer;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.onClose;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype.callback;
    /** @type {?} */
    Angular4PaystackEmbedComponent.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackEmbedComponent.prototype.paystackService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Angular4PaystackModule {
    /**
     * @param {?} token
     * @return {?}
     */
    static forRoot(token) {
        return {
            ngModule: Angular4PaystackModule,
            providers: [
                Angular4PaystackService,
                { provide: PUBLIC_KEY_TOKEN, useValue: token }
            ]
        };
    }
}
Angular4PaystackModule.ɵfac = function Angular4PaystackModule_Factory(t) { return new (t || Angular4PaystackModule)(); };
Angular4PaystackModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: Angular4PaystackModule });
Angular4PaystackModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Angular4PaystackModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent],
                declarations: [Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent],
                providers: []
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Angular4PaystackModule, { declarations: function () { return [Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Angular4PaystackComponent, Angular4PaystackDirective, Angular4PaystackEmbedComponent, Angular4PaystackModule, Angular4PaystackService as ɵa, PUBLIC_KEY_TOKEN as ɵb };

//# sourceMappingURL=angular4-paystack.js.map